/**
 * voyager-server
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * Contact: hello@appscode.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from '../ApiClient';
import V1beta1CertificateStorage from './V1beta1CertificateStorage';
import V1beta1ChallengeProvider from './V1beta1ChallengeProvider';
import V1beta1LocalTypedReference from './V1beta1LocalTypedReference';





/**
* The V1beta1CertificateSpec model module.
* @module com.appscode.voyager.client/com.appscode.voyager.client.models/V1beta1CertificateSpec
* @version 1.0-SNAPSHOT
*/
export default class V1beta1CertificateSpec {
    /**
    * Constructs a new <code>V1beta1CertificateSpec</code>.
    * @alias module:com.appscode.voyager.client/com.appscode.voyager.client.models/V1beta1CertificateSpec
    * @class
    * @param acmeUserSecretName {String} Secret contains ACMEUser information. Secret must contain a key `email` If empty tries to find an Secret via domains if not found create an ACMEUser and stores as a secret. Secrets key to be expected:  ACME_EMAIL -> required, if not provided it will through error.  ACME_SERVER_URL -> custom server url to generate certificates, default is lets encrypt.  ACME_USER_DATA -> user data, if not found one will be created for the provided email,    and stored in the key.
    * @param challengeProvider {module:com.appscode.voyager.client/com.appscode.voyager.client.models/V1beta1ChallengeProvider} ChallengeProvider details to verify domains
    */

    constructor(acmeUserSecretName, challengeProvider) {
        

        
        

        this['acmeUserSecretName'] = acmeUserSecretName;this['challengeProvider'] = challengeProvider;

        
    }

    /**
    * Constructs a <code>V1beta1CertificateSpec</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:com.appscode.voyager.client/com.appscode.voyager.client.models/V1beta1CertificateSpec} obj Optional instance to populate.
    * @return {module:com.appscode.voyager.client/com.appscode.voyager.client.models/V1beta1CertificateSpec} The populated <code>V1beta1CertificateSpec</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new V1beta1CertificateSpec();

            
            
            

            if (data.hasOwnProperty('acmeStagingURL')) {
                obj['acmeStagingURL'] = ApiClient.convertToType(data['acmeStagingURL'], 'String');
            }
            if (data.hasOwnProperty('acmeUserSecretName')) {
                obj['acmeUserSecretName'] = ApiClient.convertToType(data['acmeUserSecretName'], 'String');
            }
            if (data.hasOwnProperty('challengeProvider')) {
                obj['challengeProvider'] = V1beta1ChallengeProvider.constructFromObject(data['challengeProvider']);
            }
            if (data.hasOwnProperty('domains')) {
                obj['domains'] = ApiClient.convertToType(data['domains'], ['String']);
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('httpProviderIngressReference')) {
                obj['httpProviderIngressReference'] = V1beta1LocalTypedReference.constructFromObject(data['httpProviderIngressReference']);
            }
            if (data.hasOwnProperty('provider')) {
                obj['provider'] = ApiClient.convertToType(data['provider'], 'String');
            }
            if (data.hasOwnProperty('providerCredentialSecretName')) {
                obj['providerCredentialSecretName'] = ApiClient.convertToType(data['providerCredentialSecretName'], 'String');
            }
            if (data.hasOwnProperty('storage')) {
                obj['storage'] = V1beta1CertificateStorage.constructFromObject(data['storage']);
            }
        }
        return obj;
    }

    /**
    * ACME server that will be used to obtain this certificate. Deprecated
    * @member {String} acmeStagingURL
    */
    acmeStagingURL = undefined;
    /**
    * Secret contains ACMEUser information. Secret must contain a key `email` If empty tries to find an Secret via domains if not found create an ACMEUser and stores as a secret. Secrets key to be expected:  ACME_EMAIL -> required, if not provided it will through error.  ACME_SERVER_URL -> custom server url to generate certificates, default is lets encrypt.  ACME_USER_DATA -> user data, if not found one will be created for the provided email,    and stored in the key.
    * @member {String} acmeUserSecretName
    */
    acmeUserSecretName = undefined;
    /**
    * ChallengeProvider details to verify domains
    * @member {module:com.appscode.voyager.client/com.appscode.voyager.client.models/V1beta1ChallengeProvider} challengeProvider
    */
    challengeProvider = undefined;
    /**
    * Tries to obtain a single certificate using all domains passed into Domains. The first domain in domains is used for the CommonName field of the certificate, all other domains are added using the Subject Alternate Names extension.
    * @member {Array.<String>} domains
    */
    domains = undefined;
    /**
    * Deprecated
    * @member {String} email
    */
    email = undefined;
    /**
    * This is the ingress Reference that will be used if provider is http Deprecated
    * @member {module:com.appscode.voyager.client/com.appscode.voyager.client.models/V1beta1LocalTypedReference} httpProviderIngressReference
    */
    httpProviderIngressReference = undefined;
    /**
    * Following fields are deprecated and will removed in future version. https://github.com/appscode/voyager/pull/506 Deprecated. DNS Provider.
    * @member {String} provider
    */
    provider = undefined;
    /**
    * ProviderCredentialSecretName is used to create the acme client, that will do needed processing in DNS. Deprecated
    * @member {String} providerCredentialSecretName
    */
    providerCredentialSecretName = undefined;
    /**
    * Storage backend to store the certificates currently, kubernetes secret and vault.
    * @member {module:com.appscode.voyager.client/com.appscode.voyager.client.models/V1beta1CertificateStorage} storage
    */
    storage = undefined;








}


