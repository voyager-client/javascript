/**
 * voyager-server
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * Contact: hello@appscode.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from '../ApiClient';
import IntstrIntOrString from './IntstrIntOrString';
import V1beta1HTTPIngressPath from './V1beta1HTTPIngressPath';





/**
* The V1beta1HTTPIngressRuleValue model module.
* @module com.appscode.voyager.client/com.appscode.voyager.client.models/V1beta1HTTPIngressRuleValue
* @version 1.0-SNAPSHOT
*/
export default class V1beta1HTTPIngressRuleValue {
    /**
    * Constructs a new <code>V1beta1HTTPIngressRuleValue</code>.
    * HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://&lt;host&gt;/&lt;path&gt;?&lt;searchpart&gt; -&gt; backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last &#39;/&#39; and before the first &#39;?&#39; or &#39;#&#39;.
    * @alias module:com.appscode.voyager.client/com.appscode.voyager.client.models/V1beta1HTTPIngressRuleValue
    * @class
    * @param paths {Array.<module:com.appscode.voyager.client/com.appscode.voyager.client.models/V1beta1HTTPIngressPath>} A collection of paths that map requests to backends.
    */

    constructor(paths) {
        

        
        

        this['paths'] = paths;

        
    }

    /**
    * Constructs a <code>V1beta1HTTPIngressRuleValue</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:com.appscode.voyager.client/com.appscode.voyager.client.models/V1beta1HTTPIngressRuleValue} obj Optional instance to populate.
    * @return {module:com.appscode.voyager.client/com.appscode.voyager.client.models/V1beta1HTTPIngressRuleValue} The populated <code>V1beta1HTTPIngressRuleValue</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new V1beta1HTTPIngressRuleValue();

            
            
            

            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('noTLS')) {
                obj['noTLS'] = ApiClient.convertToType(data['noTLS'], 'Boolean');
            }
            if (data.hasOwnProperty('nodePort')) {
                obj['nodePort'] = IntstrIntOrString.constructFromObject(data['nodePort']);
            }
            if (data.hasOwnProperty('paths')) {
                obj['paths'] = ApiClient.convertToType(data['paths'], [V1beta1HTTPIngressPath]);
            }
            if (data.hasOwnProperty('port')) {
                obj['port'] = IntstrIntOrString.constructFromObject(data['port']);
            }
        }
        return obj;
    }

    /**
    * The network address to listen HTTP(s) connections on.
    * @member {String} address
    */
    address = undefined;
    /**
    * Set noTLS = true to force plain text. Else, auto detect like present
    * @member {Boolean} noTLS
    */
    noTLS = undefined;
    /**
    * Specifies the node port of the referenced service.
    * @member {module:com.appscode.voyager.client/com.appscode.voyager.client.models/IntstrIntOrString} nodePort
    */
    nodePort = undefined;
    /**
    * A collection of paths that map requests to backends.
    * @member {Array.<module:com.appscode.voyager.client/com.appscode.voyager.client.models/V1beta1HTTPIngressPath>} paths
    */
    paths = undefined;
    /**
    * port to listen http(s) connections.
    * @member {module:com.appscode.voyager.client/com.appscode.voyager.client.models/IntstrIntOrString} port
    */
    port = undefined;








}


